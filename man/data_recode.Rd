% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_recode.R
\name{data_recode}
\alias{data_recode}
\alias{data_recode.numeric}
\alias{data_recode.data.frame}
\title{Recode (or "cut") data into groups of values.}
\usage{
data_recode(x, ...)

\method{data_recode}{numeric}(
  x,
  split = "median",
  n_groups = NULL,
  range = NULL,
  lowest = 1,
  ...
)

\method{data_recode}{data.frame}(
  x,
  split = "median",
  n_groups = NULL,
  range = NULL,
  lowest = 1,
  select = NULL,
  exclude = NULL,
  force = FALSE,
  append = FALSE,
  ...
)
}
\arguments{
\item{x}{A data frame, numeric vector or factor.}

\item{...}{not used.}

\item{split}{Character vector, indicating where to split variables, or
numeric values, indicating cut-off values. If character, may be one of
\code{"median"}, \code{"mean"}, \code{"quantile"}, \code{"equal_length"}, or \code{"equal_range"}.}

\item{n_groups}{If \code{split} is \code{"quantile"} or \code{"equal_length"}, this defines
the number of requested groups (i.e. resulting number of levels or values)
for the recoded variable(s). \code{"quantile"} will define intervals based
on the distribution of the variable, while \code{"equal_length"} tries to
divide the range of the variable into pieces of equal length.}

\item{range}{If \code{split = "equal_range"}, this defines the range of values
that are recoded into a new value.}

\item{lowest}{Minimum value of the recoded variable(s). If \code{NULL} (the default),
for numeric variables, the minimum of the original input is preserved. For
factors, the default minimum is \code{1}. For \code{split = "equal_range"}, the
default minimum is always \code{1}, unless specified otherwise in \code{lowest}.}

\item{select}{Character vector of column names. If \code{NULL} (the default), all
variables will be selected.}

\item{exclude}{Character vector of column names to be excluded from selection.}

\item{force}{Logical, if \code{TRUE}, forces recoding of factors as well.}

\item{append}{Logical or string. If \code{TRUE}, recoded variables get new
column names (with the suffix \code{"_r"}) and are appended (column bind) to \code{x},
thus returning both the original and the recoded variables. If \code{FALSE},
original variables in \code{x} will be overwritten by their recoded versions.
If a character value, recoded variables are appended with new column
names (using the defined suffix) to the original data frame.}
}
\description{
This functions divides the range of variables into intervals and recodes
the values inside these intervals according to their related interval.
It is basically a wrapper around base R's \code{cut()}, providing a simplified
and more accessible way to define the interval breaks (cut-off values).
}
\details{
\subsection{Splits and cut-off values}{
Cut-off values, which are based on the median, mean or quantile
functions, are \emph{exclusive}, this means that these values indicate the
lower bound of the next group to begin. Take a simple example, a numeric
variable with values from 1 to 9. The median would be 5, thus 1-4 are
recoded into 1, while 5-9 would turn into 2 (compare
\code{cbind(1:9, data_recode(1:9))}). The same variable, using \code{split = "quantile"}
and \code{n_groups = 3} would define cut-off points at 3.67 and 6.33 (see
\verb{quantile(1:9, probs = c(1/3, 2/3)}), which means that values from 1 to 3
are recoded into 1 (because the next group of values to be recoded starts
at 3.67), 4 to 6 into 2 and 7 to 9 into 3.
}

\subsection{Recoding into groups with equal size or range}{
\code{split = "equal_length"} and \code{split = "equal_range"} try to divide the
range of \code{x} into intervals of similar (or same) length. The difference is
that \code{split = "equal_length"} will divide the range of \code{x} into \code{n_groups}
pieces and thereby defining the intervals used as breaks (hence, it is
equivalent to \code{cut(x, breaks = n_groups)}), while  \code{split = "equal_range"}
will cut \code{x} into intervals that all have the length of \code{range}, where the
first interval by defaults starts at \code{1}. The lowest (or starting) value
of that interval can be defined using the \code{lowest} argument.
}
}
\examples{
set.seed(123)
x <- sample(1:10, size = 50, replace = TRUE)

table(x)

# by default, at median
table(data_recode(x))

# into 3 groups, based on distribution (quantiles)
table(data_recode(x, split = "quantile", n_groups = 3))

# into 3 groups, manual cut offs
table(data_recode(x, split = c(3, 5)))

set.seed(123)
x <- sample(1:100, size = 500, replace = TRUE)

# into 5 groups, try to recode into intervals of similar length,
# i.e. the range within groups is the same for all groups
table(data_recode(x, split = "equal_length", n_groups = 5))

# into 5 groups, try to return same range within groups
# i.e. 1-20, 21-40, 41-60, etc. Since the range of "x" is
# 1-100, and we have a range of 20, this results into 5
# groups, and thus is for this particular case identical
# to the previous result.
table(data_recode(x, split = "equal_range", range = 20))
}
